name: GoRelease

on:
  push:
    tags:
      - 'v*.*.*'
env:
  # Common versions
  GO_VERSION: '1.21'
  GO_REQUIRED_MIN_VERSION: ''
  GOPATH: '/home/runner/work/managed-serviceaccount/managed-serviceaccount/go'
  GITHUB_REF: ${{ github.ref }}
  CHART_NAME: managed-serviceaccount
  CHART_VERSION_FILE_PATH: ./charts/managed-serviceaccount/Chart.yaml

defaults:
  run:
    working-directory: go/src/open-cluster-management.io/managed-serviceaccount

jobs:
  env:
    name: prepare release env
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: go/src/open-cluster-management.io/managed-serviceaccount
      - name: get release version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: get major release version
        run: |
          echo "MAJOR_RELEASE_VERSION=${RELEASE_VERSION%.*}" >> $GITHUB_ENV
          echo "TRIMMED_RELEASE_VERSION=${RELEASE_VERSION#v}" >> $GITHUB_ENV
    outputs:
      MAJOR_RELEASE_VERSION: ${{ env.MAJOR_RELEASE_VERSION }}
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      TRIMMED_RELEASE_VERSION: ${{ env.TRIMMED_RELEASE_VERSION }}
  increase-chart-version:
    runs-on: ubuntu-latest
    needs: [ env ]
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: go/src/open-cluster-management.io/managed-serviceaccount

      - name: calculate next version
        id: calculate_next_version
        run: |
          echo "Current version: $CURRENT_VERSION"
          # Extract the major and minor version components
          MAJOR=$(echo $CURRENT_VERSION | cut -d '.' -f 1)
          MINOR=$(echo $CURRENT_VERSION | cut -d '.' -f 2)
          # Increment the minor version
          NEXT_MINOR=$((MINOR + 1))
          # Construct the next version
          NEXT_VERSION="$MAJOR.$NEXT_MINOR.0"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        env:
          CURRENT_VERSION: ${{ needs.env.outputs.TRIMMED_RELEASE_VERSION }}

      - name: update chart version file
        # if: steps.check_pull_request.outputs.pr_exists != 'true'
        run: |
          echo "Updating chart version file from $CURRENT_VERSION to $NEXT_VERSION"
          sed -i "s/version: $CURRENT_VERSION/version: $NEXT_VERSION/" ${{ env.CHART_VERSION_FILE_PATH }}
        env:
          CURRENT_VERSION: ${{ needs.env.outputs.TRIMMED_RELEASE_VERSION }}
          NEXT_VERSION: ${{ steps.calculate_next_version.outputs.next_version }}

      - name: check if pull request already exists
        id: check_pull_request
        run: |
          gh pr list --state open > pr_list.txt
          cat pr_list.txt
          echo "debug try to grep"
          echo "grep Update chart version to ${{ steps.calculate_next_version.outputs.next_version }} pr_list.txt"
          PR_EXIST=$(grep "Update chart version to ${{ steps.calculate_next_version.outputs.next_version }}" pr_list.txt)
          echo "debug end of grep"
          echo "pr_exist=$PR_EXIST"
          if [ -n "$PR_EXIST" ]; then
            echo "Pull request already exists for version ${{ steps.calculate_next_version.outputs.next_version }}. Exiting."
            echo "pr_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing pull request found for version ${{ steps.calculate_next_version.outputs.next_version }}. Proceeding with creating a new one."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: create pull request
        if: steps.check_pull_request.outputs.pr_exists != 'true'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            Update chart version to ${{ steps.calculate_next_version.outputs.next_version }}

            Signed-off-by: "$GITHUB_ACTOR" "$GITHUB_ACTOR@users.noreply.github.com"
          title: "Update chart version to ${{ steps.calculate_next_version.outputs.next_version }}"
          body: "Automatically updating version to ${{ steps.calculate_next_version.outputs.next_version }}"
          branch: update-chart-version-${{ steps.calculate_next_version.outputs.next_version }}
        env:
          CURRENT_VERSION: ${{ needs.env.outputs.TRIMMED_RELEASE_VERSION }}
          NEXT_VERSION: ${{ steps.calculate_next_version.outputs.next_version }}
